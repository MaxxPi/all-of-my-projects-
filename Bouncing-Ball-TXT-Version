<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Bouncing Ball + Grass/Stone/Deepslate/Mycelium/Sculk/Sand/Dripstone/Ancient Debris/Packed Ice/Deepslate Iron Ore/Diamond Ore Blocks (exact 64x64 textures)</title>
<style>
:root { --cube-w:64px; --cube-h:64px; }
html,body { height:100%; margin:0; padding:0; overflow:hidden; background-color:#333; }
body {
background-image: url('https://lh7-rt.googleusercontent.com/formsz/AN7BsVDGHK4MWJ25rLd2bHQiZ1-weQkbVzPVBUpK2FcFG2ni5dCa3jeXORzCp8OcBBSyHsOK97nPJtzN7NJNdVQcs95kc56jd9r4fx3TjVJ39SwCdeKKWTfVQQUs15HsNSSqdyrteQKpCGPwHFX5jKsWxbidNn-mVb58DSH-?key=axGmK6HsimlTstZHh6Ng6w');
background-repeat:no-repeat; background-size:cover; background-position:center;
}
canvas { position:absolute; inset:0; z-index:80; display:block; pointer-events:none; }
#cubeContainer { position:absolute; top:0; left:0; width:100%; height:100%; z-index:70; pointer-events:auto; }
.cube {
width: var(--cube-w); height: var(--cube-h); position:absolute; box-sizing:content-box; user-select:none;
border: 0;
background-repeat:no-repeat; background-size: var(--cube-w) var(--cube-h); background-position:center;
display:block;
}
.cube.placeholder {
background-image:none !important;
background-color:#9e9e9e; border:2px dashed #666; display:flex; align-items:center; justify-content:center;
color:#222; font-weight:700; font-size:12px;
width:var(--cube-w); height:var(--cube-h);
}
.giant {
position:absolute; width:40vmin; height:40vmin; max-width:800px; max-height:800px;
left:50%; top:50%; transform:translate(-50%, -50%); z-index:60;
background-repeat:no-repeat; background-size:cover; background-position:center;
border:6px solid rgba(255,255,255,0.12); display:flex; align-items:center; justify-content:center;
color:white; font-size:clamp(18px,3vmin,36px); user-select:none; pointer-events:none;
}
#loadingBadge {
position:fixed; left:12px; bottom:12px; z-index:999; color:#fff;
background:rgba(0,0,0,0.45); padding:6px 8px; border-radius:6px; font-family:system-ui,Segoe UI,Arial;
font-size:13px;
}
</style>
</head>
<body>
<canvas id="canvas"></canvas>
<div id="cubeContainer" aria-hidden="true"></div>
<div id="loadingBadge">Loading assets...</div>

<!-- Grass folder audio set -->
<audio id="G_s1" src="https://minecraft.wiki/images/Grass_dig1.ogg?2f212&format=original" preload="auto"></audio>
<audio id="G_s2" src="https://minecraft.wiki/images/Grass_dig2.ogg?80af9&format=original" preload="auto"></audio>
<audio id="G_s3" src="https://minecraft.wiki/images/Grass_dig3.ogg?98c7a&format=original" preload="auto"></audio>
<audio id="G_s4" src="https://minecraft.wiki/images/Grass_dig4.ogg?812e8&format=original" preload="auto"></audio>

<!-- Stone folder audio set (used for S, DIO, DO) -->
<audio id="S_s1" src="https://minecraft.wiki/images/Stone_dig4.ogg?48777&format=original" preload="auto"></audio>
<audio id="S_s2" src="https://minecraft.wiki/images/Stone_dig3.ogg?fc524&format=original" preload="auto"></audio>
<audio id="S_s3" src="https://minecraft.wiki/images/Stone_dig2.ogg?a68b2&format=original" preload="auto"></audio>
<audio id="S_s4" src="https://minecraft.wiki/images/Stone_dig1.ogg?c8ca7&format=original" preload="auto"></audio>

<!-- Deepslate folder audio set -->
<audio id="D_s1" src="https://minecraft.wiki/images/Deepslate_break4.ogg?8c9e1&format=original" preload="auto"></audio>
<audio id="D_s2" src="https://minecraft.wiki/images/Deepslate_break3.ogg?8c9e1&format=original" preload="auto"></audio>
<audio id="D_s3" src="https://minecraft.wiki/images/Deepslate_break1.ogg?8c9e1&format=original" preload="auto"></audio>
<audio id="D_s4" src="https://minecraft.wiki/images/Deepslate_break2.ogg?8c9e1&format=original" preload="auto"></audio>

<!-- Mycelium folder uses Grass audio -->

<!-- Sculk folder audio set -->
<audio id="SC_s1" src="https://minecraft.wiki/images/Sculk_catalyst_break1.ogg?55391&format=original" preload="auto"></audio>
<audio id="SC_s2" src="https://minecraft.wiki/images/Sculk_catalyst_break2.ogg?55391&format=original" preload="auto"></audio>
<audio id="SC_s3" src="https://minecraft.wiki/images/Sculk_catalyst_break3.ogg?55391&format=original" preload="auto"></audio>
<audio id="SC_s4" src="https://minecraft.wiki/images/Sculk_catalyst_break4.ogg?55391&format=original" preload="auto"></audio>

<!-- Sand folder audio set -->
<audio id="SA_s1" src="https://minecraft.wiki/images/Sand_dig3.ogg?20d45&format=original" preload="auto"></audio>
<audio id="SA_s2" src="https://minecraft.wiki/images/Sand_dig2.ogg?20d45&format=original" preload="auto"></audio>
<audio id="SA_s3" src="https://minecraft.wiki/images/Sand_dig1.ogg?20d45&format=original" preload="auto"></audio>

<!-- Dripstone folder audio set -->
<audio id="DR_s1" src="https://minecraft.wiki/images/Dripstone_break4.ogg?0a4f4&format=original" preload="auto"></audio>
<audio id="DR_s2" src="https://minecraft.wiki/images/Dripstone_break3.ogg?0a4f4&format=original" preload="auto"></audio>
<audio id="DR_s3" src="https://minecraft.wiki/images/Dripstone_break2.ogg?0a4f4&format=original" preload="auto"></audio>
<audio id="DR_s4" src="https://minecraft.wiki/images/Dripstone_break1.ogg?0a4f4&format=original" preload="auto"></audio>

<!-- Ancient Debris (AC) folder audio set -->
<audio id="AC_s1" src="https://minecraft.wiki/images/Ancient_Debris_dig4.ogg?77b42&format=original" preload="auto"></audio>
<audio id="AC_s2" src="https://minecraft.wiki/images/Ancient_Debris_dig3.ogg?77b42&format=original" preload="auto"></audio>
<audio id="AC_s3" src="https://minecraft.wiki/images/Ancient_Debris_dig2.ogg?77b42&format=original" preload="auto"></audio>
<audio id="AC_s4" src="https://minecraft.wiki/images/Ancient_Debris_dig1.ogg?77b42&format=original" preload="auto"></audio>

<!-- Packed Ice (PC) folder audio set -->
<audio id="PC_s1" src="https://minecraft.wiki/images/Glass_dig3.ogg?cafe6&format=original" preload="auto"></audio>
<audio id="PC_s2" src="https://minecraft.wiki/images/Glass_dig2.ogg?cafe6&format=original" preload="auto"></audio>
<audio id="PC_s3" src="https://minecraft.wiki/images/Glass_dig1.ogg?cafe6&format=original" preload="auto"></audio>

<!-- Explosion sounds -->
<audio id="exp1" src="https://minecraft.wiki/images/Explosion4.ogg?6ed29&format=original" preload="auto"></audio>
<audio id="exp2" src="https://minecraft.wiki/images/Explosion3.ogg?6ed29&format=original" preload="auto"></audio>
<audio id="exp3" src="https://minecraft.wiki/images/Explosion1.ogg?6ed29&format=original" preload="auto"></audio>
<audio id="exp4" src="https://minecraft.wiki/images/Explosion2.ogg?6ed29&format=original" preload="auto"></audio>

<script>
// asset URLs (added DIO and DO folders)
const grassImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVDgmeo2ipEUu1YcW9fynz6NXlzqQEY8L2um6YbFcpVpNYrnsrqDPChP6l5NwWJ0yyfGyw4WIt8wgy0q9SyMerlECuWv2N_IVXtBm2CXD79pMWz03ivx9-PBoXNcfDHTCt1JSxjp-GFxSM5WtGRc9utZHoukENp-LKjU7w?key=0H3DkGbyFv4YK1lpIxdIxg';
const myceliumImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVB2c3k9ERBN_CCco6gBDxeK-sbm_PZ2nrNmJXroVh87yxkFUNVGTLQUNLHC-s43N2_xV0-cyoK3IY1rVXJy6qdkehnzVr2nvSv8djqqCgJ7BhgTX5UcKoFbxQioRPYyW9JJLNLHwD-oyJ1q0TYwvdzMVYeu2_quQeOJyw?key=yU2Zc-31vCDwXy5T5YlPjw';
const stoneImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVDhAd57I_261mobMSTBjqZs2qTFUEeZKkHy4ZpO_lY1LlpHx5ocTnrVmasG8ctDVTvhpMwmeAuAxlnQsTvAJ5lysnT2f3bONmpeZCLG2HDSc90oArIRHeZNejp_v0SdIirvcX3__Cig_zlkmuBxGkDPJdzLLwlycE5C?key=50w3wHOYoipsbKQtiG1AVQ';
const deepslateImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVCu60dAmYHuEvGCUAIxRwzP1HAJV9MBFnEnpIE_JIswCosopM8m92MSZnq_ADzxIZDLP1hGgnmc1Aao9PSwBA0FfH43OUePjv7V5h-xA8gup2jFXvsZn7Nrv0b4G3BHc-TkIKY2NWJYUtyvGlsSJ53BTxlzVlpiigBEaw?key=Lt3tjOR1xcISdE8STJIrRg';
const sculkImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVBbtXAzJ1m9b5tYXlt6phB2IObIKOy9N4HlSfYu3FvkG1KIrsnwDyHqGCKBy3-E6SrJIf0FF4XsPX201g5G8e4eARX24Ijg3v2mUMku0ZodnyRCPrdfcMtOX2C12CT1NIzytKKCI5jG7xlIP4Dkk7HbW6Bzeq-D0Hpj?key=hgVaphy-rHROb6gk5HSWYQ';
const sandImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVCqf5Bv_Ncrkq86Aa1OvQNiuhqHr4qxmx72SX1up85cR5iEl3pTiJ1DUHCE7FuMGYQy8IftTWs0SHp-6zPp0LwRaBL1QuQTcandui2E3928dbj2YIpN7i8KjL6IPZgxa9sSJSFXfMiv-5zcRL48G70CFiJrtyyADCQyyA?key=Wp8rrg7u0NyEguIHr8Ue3g';
const dripstoneImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVDBH1ZVHVxI4YuEHBEaLAoOMWw8arZShPkXxeKgo4e534Fk04kUSrwGZSnFh0l-FvCol_dNSgne0etAla-Rmvl2348C1tuVaFojjW8vnXAEAw1ltUlJQPUb-uU-a6wQKb0n0kAgwbPMBZbLw0TcjBlpbpVqqJR521L2?key=HWmupXdjjOhsFf0TWvrdZA';
const ancientDebrisImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVBHvmrJxK8ciXAd4apBt__pCN-dwWTAwShg6CI9xQ_66lZbAEgPqWFCplj3G8WwwS2NDxAjWjqrVulBH1WQ7FiohJVPfMgpwf9VW4rtzwtMlK5M88DmK_qSxZY08JhTC86Y3Vh0vht-JU7RxMyc3upnk3FIUvqNBJSWqQ?key=QSS_gS8-boyJBN8ivGPLIQ';
const packedIceImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVARj8U9xpAltw-8fs9EpbLHVuEY5j1Bzv2ZP53PnlDOQd_F1214ZzvJkqfpr15PPy0G30P7OmvLMgQj-ImJ5sXPqSpTv4bXVGxc85PfNxzgRl71mYdTsxuw9gnkdb2nlFabxv82lFCmjCLZ5rijmVOla7qfBCsG0hNT6A?key=nrHNEg0Aeocd8M0tZc-Jzw';
const deepslateIronOreImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVALNIx1C-W88e5JLe25BLDQEYWeAR-LU8mpzJYiCOo7xSGbljnuPGAbD7c2CRvhKJCoSvrVWfguxYMHJ22zaoSgkvsggif2D23fQoluGVYq7lsu2l_RFX9n5jQV4y7DL-JwBPSXcl5WlAxzHYB5Embr5V382Hd0MukA?key=l19wyhduuG9f0njrg7SNlA';
const diamondOreImg = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVAVX3XcKzvgxMdAe80QaXh-WfTdNTQstm9HNSLlvrus8OtlCjC9AnrME5GRddAvUnDA5VV3GD0MsmYSdVYk9KZKJt3u6NCrIfPogECG7pazNXRvuWXWbXfm6z8Ghc3-GLJnGCdTK5qdAD3W-FuGwbsl4FV22Eqxqb_p?key=TkCtDCByc05ZuqjmU2ZlHg';
const giantImgURL = 'https://lh7-rt.googleusercontent.com/formsz/AN7BsVBjWD2JMAX-JqFfeajHoBozXsTQmfQq0t4LPelvOyOs9oBmhmBeEZBwW1fD3CDdk-6OuDLCsK8G192qoMvvlL7NrtM3e2Jb5GTN8yG7i1hP7bBs0vnq-z7vVetHTgebtSheONux_p1g4pI9rg3AyTHDriyJwAYlYxlF1g?key=0EV8FvQWwRYbvKw5RCo3kA';

const SPAWN_PERIOD_MS = 20_000;
const GIANT_SPAWN_PERIOD_MS = 2 * 60 * 1000;
const GIANT_DURATION_MS = 2000;
const CUBE_W = 64, CUBE_H = 64;
const MIN_SPEED = 2;

const state = {
grassLoaded: false,
myceliumLoaded: false,
stoneLoaded: false,
deepslateLoaded: false,
sculkLoaded: false,
sandLoaded: false,
dripstoneLoaded: false,
ancientDebrisLoaded: false,
packedIceLoaded: false,
deepslateIronOreLoaded: false,
diamondOreLoaded: false,
audio: { G: false, S: false, D: false, SC: false, SA: false, DR: false, AC: false, PC: false, EXP: false }
};
const loadingBadge = document.getElementById('loadingBadge');

function loadImage(url){
return new Promise(res => {
const i = new Image();
i.onload = () => res(true);
i.onerror = () => res(false);
i.src = url;
});
}

function prepareAudio(ids){
return Promise.all(ids.map(id => new Promise(resolve => {
const a = document.getElementById(id);
if (!a) return resolve(false);
const onCan = () => { a.removeEventListener('canplaythrough', onCan); resolve(true); };
a.addEventListener('canplaythrough', onCan);
setTimeout(()=> resolve(!a.error), 1500);
}))).then(results => results.some(Boolean));
}

async function preloadAll(){
loadingBadge.textContent = 'Loading images...';
const [gLoaded, mLoaded, sLoaded, dLoaded, scLoaded, saLoaded, drLoaded, acLoaded, pcLoaded, dioLoaded, doLoaded] = await Promise.all([
loadImage(grassImg), loadImage(myceliumImg), loadImage(stoneImg), loadImage(deepslateImg), loadImage(sculkImg), loadImage(sandImg), loadImage(dripstoneImg), loadImage(ancientDebrisImg), loadImage(packedIceImg), loadImage(deepslateIronOreImg), loadImage(diamondOreImg)
]);
state.grassLoaded = !!gLoaded;
state.myceliumLoaded = !!mLoaded;
state.stoneLoaded = !!sLoaded;
state.deepslateLoaded = !!dLoaded;
state.sculkLoaded = !!scLoaded;
state.sandLoaded = !!saLoaded;
state.dripstoneLoaded = !!drLoaded;
state.ancientDebrisLoaded = !!acLoaded;
state.packedIceLoaded = !!pcLoaded;
state.deepslateIronOreLoaded = !!dioLoaded;
state.diamondOreLoaded = !!doLoaded;
loadingBadge.textContent = 'Preparing audio...';
state.audio.G = await prepareAudio(['G_s1','G_s2','G_s3','G_s4']);
state.audio.S = await prepareAudio(['S_s1','S_s2','S_s3','S_s4']);
state.audio.D = await prepareAudio(['D_s1','D_s2','D_s3','D_s4']);
state.audio.SC = await prepareAudio(['SC_s1','SC_s2','SC_s3','SC_s4']);
state.audio.SA = await prepareAudio(['SA_s1','SA_s2','SA_s3']);
state.audio.DR = await prepareAudio(['DR_s1','DR_s2','DR_s3','DR_s4']);
state.audio.AC = await prepareAudio(['AC_s1','AC_s2','AC_s3','AC_s4']);
state.audio.PC = await prepareAudio(['PC_s1','PC_s2','PC_s3']);
state.audio.EXP = await prepareAudio(['exp1','exp2','exp3','exp4']);
loadingBadge.textContent = 'Assets ready';
setTimeout(()=> loadingBadge.style.display = 'none', 900);
}

// canvas setup
const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
function resize(){ canvas.width = innerWidth; canvas.height = innerHeight; }
addEventListener('resize', resize);
resize();

// ball
let x = canvas.width/2, y = canvas.height/2, dx = 5, dy = 4;
const radius = 30;
const cubeContainer = document.getElementById('cubeContainer');

function safePlayById(id){
const a = document.getElementById(id);
if (!a) return;
try { a.currentTime = 0; a.play().catch(()=>{}); } catch(e){}
}

function playRandomGrass(){
const ids = ['G_s1','G_s2','G_s3','G_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomStone(){
const ids = ['S_s1','S_s2','S_s3','S_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomDeepslate(){
const ids = ['D_s1','D_s2','D_s3','D_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomSculk(){
const ids = ['SC_s1','SC_s2','SC_s3','SC_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomSand(){
const ids = ['SA_s1','SA_s2','SA_s3'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomDripstone(){
const ids = ['DR_s1','DR_s2','DR_s3','DR_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomAncientDebris(){
const ids = ['AC_s1','AC_s2','AC_s3','AC_s4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}
function playRandomPackedIce(){
const ids = ['PC_s1','PC_s2','PC_s3'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}

function playRandomExplosion(){
const ids = ['exp1','exp2','exp3','exp4'];
safePlayById(ids[Math.floor(Math.random()*ids.length)]);
}

function createCubeElement(folder){
const el = document.createElement('div');
el.className = 'cube folder-' + (
folder === 'G' ? 'grass' :
folder === 'M' ? 'mycelium' :
folder === 'S' ? 'stone' :
folder === 'D' ? 'deepslate' :
folder === 'SC' ? 'sculk' :
folder === 'SA' ? 'sand' :
folder === 'DR' ? 'dripstone' :
folder === 'AC' ? 'ancientdebris' :
folder === 'PC' ? 'packedice' :
folder === 'DIO' ? 'deepslateironore' :
folder === 'DO' ? 'diamondore' : ''
);
el.dataset.folder = folder;
if (folder === 'G'){
if (state.grassLoaded) el.style.backgroundImage = `url("${grassImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'M'){
if (state.myceliumLoaded) el.style.backgroundImage = `url("${myceliumImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'S'){
if (state.stoneLoaded) el.style.backgroundImage = `url("${stoneImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'D'){
if (state.deepslateLoaded) el.style.backgroundImage = `url("${deepslateImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'SC'){
if (state.sculkLoaded) el.style.backgroundImage = `url("${sculkImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'SA'){
if (state.sandLoaded) el.style.backgroundImage = `url("${sandImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'DR'){
if (state.dripstoneLoaded) el.style.backgroundImage = `url("${dripstoneImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'AC'){
if (state.ancientDebrisLoaded) el.style.backgroundImage = `url("${ancientDebrisImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'PC'){
if (state.packedIceLoaded) el.style.backgroundImage = `url("${packedIceImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'DIO'){
if (state.deepslateIronOreLoaded) el.style.backgroundImage = `url("${deepslateIronOreImg}")`;
else el.classList.add('placeholder');
} else if (folder === 'DO'){
if (state.diamondOreLoaded) el.style.backgroundImage = `url("${diamondOreImg}")`;
else el.classList.add('placeholder');
}
el.style.width = CUBE_W + 'px';
el.style.height = CUBE_H + 'px';
el.style.backgroundSize = CUBE_W + 'px ' + CUBE_H + 'px';
el.style.left = Math.floor(Math.random() * Math.max(0, innerWidth - CUBE_W)) + 'px';
el.style.top = Math.floor(Math.random() * Math.max(0, innerHeight - CUBE_H)) + 'px';
return el;
}

function spawnRandomFolderCube(){
const folders = ['G','M','S','D','SC','SA','DR','AC','PC','DIO','DO'];
const folder = folders[Math.floor(Math.random()*folders.length)];
const el = createCubeElement(folder);
cubeContainer.appendChild(el);
return el;
}

let spawnInterval = null;
function startSpawner(){ if (spawnInterval) clearInterval(spawnInterval); spawnRandomFolderCube(); spawnInterval = setInterval(spawnRandomFolderCube, SPAWN_PERIOD_MS); }
function stopSpawner(){ if (spawnInterval){ clearInterval(spawnInterval); spawnInterval = null; } }

function circleRectCollision(cx, cy, r, rect){
const rx = rect.left, ry = rect.top, rw = rect.width, rh = rect.height;
const closestX = Math.max(rx, Math.min(cx, rx + rw));
const closestY = Math.max(ry, Math.min(cy, ry + rh));
const ddx = cx - closestX, ddy = cy - closestY;
return (ddx*ddx + ddy*ddy) <= (r*r);
}

let giantTimer = null, giantPresent = false, giantElement = null;
function clearGiantTimer(){ if (giantTimer){ clearTimeout(giantTimer); giantTimer = null; } }
function startGiantTimer(){ clearGiantTimer(); giantTimer = setTimeout(spawnGiant, GIANT_SPAWN_PERIOD_MS); }
function resetGiantTimerOnHit(){ startGiantTimer(); }

function spawnGiant(){
if (giantPresent) return;
giantPresent = true;
giantElement = document.createElement('div');
giantElement.className = 'giant';
giantElement.style.backgroundImage = `url("${giantImgURL}")`;
cubeContainer.appendChild(giantElement);

setTimeout(() => {
const rect = giantElement.getBoundingClientRect();
const gx = rect.left + rect.width/2;
const gy = rect.top + rect.height/2;

giantElement.remove();
giantElement = null;
giantPresent = false;

document.querySelectorAll('.cube').forEach(c => c.remove());
playRandomExplosion();

const vx = x - gx, vy = y - gy;
const len = Math.hypot(vx, vy) || 1;
const nx = vx / len, ny = vy / len;
const dot = dx * nx + dy * ny;
dx = dx - 2 * dot * nx;
dy = dy - 2 * dot * ny;
let speed = Math.hypot(dx, dy);
if (speed < MIN_SPEED) { const f = MIN_SPEED / (speed || 1); dx *= f; dy *= f; }

startGiantTimer();
}, GIANT_DURATION_MS);
}

function drawBall(){ ctx.clearRect(0,0,canvas.width,canvas.height); ctx.beginPath(); ctx.arc(x,y,radius,0,Math.PI*2); ctx.fillStyle='#ffa510'; ctx.fill(); ctx.closePath(); }

function animate(){
drawBall();
x += dx; y += dy;
if (x + radius > canvas.width){ x = canvas.width - radius; dx = -Math.abs(dx); }
if (x - radius < 0){ x = radius; dx = Math.abs(dx); }
if (y + radius > canvas.height){ y = canvas.height - radius; dy = -Math.abs(dy); }
if (y - radius < 0){ y = radius; dy = Math.abs(dy); }

const cubes = Array.from(document.querySelectorAll('.cube'));
for (const cube of cubes){
const rect = cube.getBoundingClientRect();
if (circleRectCollision(x, y, radius, rect)){
const folder = cube.dataset.folder;
if (folder === 'G' || folder === 'M'){
if (state.audio.G) playRandomGrass(); else safePlayById('G_s1');
} else if (folder === 'S' || folder === 'DIO' || folder === 'DO'){
if (state.audio.S) playRandomStone(); else safePlayById('S_s1');
} else if (folder === 'D'){
if (state.audio.D) playRandomDeepslate(); else safePlayById('D_s1');
} else if (folder === 'SC'){
if (state.audio.SC) playRandomSculk(); else safePlayById('SC_s1');
} else if (folder === 'SA'){
if (state.audio.SA) playRandomSand(); else safePlayById('SA_s1');
} else if (folder === 'DR'){
if (state.audio.DR) playRandomDripstone(); else safePlayById('DR_s1');
} else if (folder === 'AC'){
if (state.audio.AC) playRandomAncientDebris(); else safePlayById('AC_s1');
} else if (folder === 'PC'){
if (state.audio.PC) playRandomPackedIce(); else safePlayById('PC_s1');
}
cube.remove();

const cx = rect.left + rect.width/2;
const cy = rect.top + rect.height/2;
const vx = x - cx, vy = y - cy;
const len = Math.hypot(vx, vy) || 1;
const nx = vx/len, ny = vy/len;
const dot = dx*nx + dy*ny;
dx = dx - 2*dot*nx; dy = dy - 2*dot*ny;
let speed = Math.hypot(dx, dy);
if (speed < MIN_SPEED){ const f = MIN_SPEED/(speed||1); dx *= f; dy *= f; }

resetGiantTimerOnHit();
break;
}
}
requestAnimationFrame(animate);
}

document.addEventListener('visibilitychange', () => {
if (document.hidden){ stopSpawner(); clearGiantTimer(); }
else { startSpawner(); startGiantTimer(); }
});

(async function init(){ await preloadAll(); startSpawner(); animate(); startGiantTimer(); })();

addEventListener('beforeunload', () => { stopSpawner(); clearGiantTimer(); });
</script>
</body>
</html>
